1.cpp:
#include "grid.h"
#include "esc.h"
#include <QPainter>
#include <QPen>
#include <QDebug>
#include <vector>
#include <QTime>
#include <iostream>
#include <QMouseEvent>
#include <QBrush>
#include <QMenu>
#include <QMenuBar>
#include <QAction>
#include <QApplication>
#include <QPushButton>
#include <QMenuBar>
#include <QMenu>
#include <QAction>
#include <QTimer>
#include <QMessageBox>

int gridy;
int gridx;
int level=0;
int logol=0;
int lastlogol=0;
int searchnum=0;
int lastnum=0;
int lasti=0;
int lastj=0;
int open=0;
int sec=0;
int ttnum=0;
int positioni=-1;
int positionj=-1;
int checkn[9][9]={{0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0}};

void grid::change_num(int n1,int n2)
{
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(array[i][j]==n1)
            {
                array[i][j]=n2;
                continue;
            }
            if(array[i][j]==n2)
            {
                array[i][j]=n1;
            }
        }
    }
}


void grid::change_row(int n1, int n2)
{
    swap(array[n1],array[n2]);
}


void grid::change_column(int n1, int n2)
{
    for(int i=0;i<9;i++)
    {
        swap(array[i][n1],array[i][n2]);
    }
}


void grid::change_threerow(int n1, int n2)
{
    for(int i=0;i<3;i++)
    {
        swap(array[n1*3+i],array[n2*3+i]);
    }
}

void grid::change_threecolumn(int n1, int n2)
{
    for(int j=0;j<9;j++)
    for(int i=0;i<3;i++)
    {
        swap(array[j][n1*3+i],array[j][n2*3+i]);
    }
}

void grid::makeblank(int level)
{
    int num=0;
    switch(level)
    {
        case 0 : num=61;ttnum=61;break;
        case 1 : num=46;ttnum=46;break;
        case 2 : num=31;ttnum=31;break;
        default : break;
    }
    QTime time= QTime::currentTime();
    qsrand(time.msec()+time.second()*1000);
    int n,m,count=0;
    for(count=0;count<num;count++)
    {
        m=qrand()%9;
        n=qrand()%9;
        if(blank[n][m]==0)
        {
            blank[n][m]=1;
        }
        else
        {
            count--;
        }
    }
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(blank[i][j]==1)
            {
                issus[i][j]=int(array[i][j]);
            }
        }
    }
    qDebug()<<count<<num;
}


void grid::createshudu1()
{
    array={{1,2,3,4,5,6,7,8,9},
           {4,5,6,7,8,9,1,2,3},
           {7,8,9,1,2,3,4,5,6},
           {2,3,4,5,6,7,8,9,1},
           {5,6,7,8,9,1,2,3,4},
           {8,9,1,2,3,4,5,6,7},
           {3,4,5,6,7,8,9,1,2},
           {6,7,8,9,1,2,3,4,5},
           {9,1,2,3,4,5,6,7,8}};


    int i=0;
    QTime time= QTime::currentTime();
    qsrand(time.msec()+time.second()*1000);
    int n,m,l;
    //交换数字
    for(i=0;i<20;i++)
    {
        n=qrand()%9+1;
        m=qrand()%9+1;
        if(n!=m)
        {
            change_num(n,m);
        }
        else
        {
            i--;
        }
    }
    //在三行之内交换行
    for(i=0;i<20;i++)
    {
        n=qrand()%3;
        m=qrand()%3;
        l=qrand()%3;
        if(n!=m)
        {
            change_row(3*l+n,3*l+m);
        }
        else
        {
            i--;
        }
    }
    //三行之内交换列
    for(i=0;i<20;i++)
    {
        n=qrand()%3;
        m=qrand()%3;
        l=qrand()%3;
        if(n!=m)
        {
            change_column(3*l+n,3*l+m);
        }
        else
        {
            i--;
        }
    }
    //三行三行交换
    for(i=0;i<10;i++)
    {
        m=qrand()%3;
        n=qrand()%3;
        if(n!=m)
        {
            change_threerow(n,m);
        }
        else
        {
            i--;
        }
    }
    //三列三列交换
    for(i=0;i<10;i++)
    {
        m=qrand()%3;
        n=qrand()%3;
        if(n!=m)
        {
            change_threecolumn(n,m);
        }
        else
        {
            i--;
        }
    }
    makeblank(level);
    for(i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            cout<<array[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
    int aa=0;
    for(i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            cout<<blank[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
    for(i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(issus[i][j]==0) aa++;
            cout<<issus[i][j]<<" ";

        }
        cout<<endl;
    }
    qDebug()<<"aa"<<aa;
}


void grid::paintEvent(QPaintEvent *)
{

    //绘制九宫格
    QPainter p(this);
    QPen pen;
    pen.setWidth(1);
    p.setPen(pen);
    gridx=width()/13;
    gridy=height()/11;

    hint.resize(gridx,gridy*3/5);
    time.resize(gridx,gridy*3/5);
    hint.move(11*gridx,gridy*2/5);
    time.move(0,2*gridy/5);
    restart.resize(gridx,gridy*3/5);
    restart.move(0,gridy/5);
    another.resize(gridx,gridy*3/5);
    another.move(0,gridy+gridy/5);

    //画行（细线）
    for(int i=0;i<10;i++)
    {
        p.drawLine(gridx,gridy+i*gridy,10*gridx,gridy+i*gridy);
    }

    //列（细线）
    for(int i=0;i<12;i++)
    {
        p.drawLine(gridx+i*gridx,gridy,gridx+i*gridx,10*gridy);
    }
    pen.setWidth(4);
    p.setPen(pen);

    //画行（粗线）
    for(int i=0;i<4;i++)
    {
        p.drawLine(gridx,gridy+3*i*gridy,10*gridx,gridy+3*i*gridy);
        p.drawLine(11*gridx,gridy+i*gridy,12*gridx,gridy+i*gridy);
    }

    //列（粗线）
    for(int i=0;i<4;i++)
    {
        p.drawLine(gridx+3*i*gridx,gridy,gridx+3*i*gridx,10*gridy);
    }

    //侧边数字框
    for(int i=0;i<10;i++)
    {
        p.drawLine(11*gridx,gridy+i*gridy,12*gridx,gridy+i*gridy);
    }
    p.drawLine(11*gridx,gridy,11*gridx,10*gridy);
    p.drawLine(12*gridx,gridy,12*gridx,10*gridy);

    //网格颜色区分已知与未知
    QString number=0;
    QBrush brush;
    brush.setColor(Qt::gray);
    brush.setStyle(Qt::Dense2Pattern);
    p.setBrush(brush);
    pen.setWidth(2);
    p.setPen(pen);
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(blank[i][j]==1)
            {
                p.drawRect((j+1)*gridx,(i+1)*gridy,gridx,gridy);
            }
        }
    }


    if(positioni>=0&&positionj>=0)
    {
        brush.setColor(Qt::yellow);
        brush.setStyle(Qt::Dense2Pattern);
        p.setBrush(brush);
        p.drawRect((positionj+1)*gridx,(positioni+1)*gridy,gridx,gridy);
    }


    //标记当前选中的数字
    brush.setColor(Qt::blue);
    brush.setStyle(Qt::Dense2Pattern);
    p.setBrush(brush);
    if(searchnum>0&&searchnum<10)
    {
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(issus[i][j]==searchnum)
                {
                    p.drawRect((j+1)*gridx,(i+1)*gridy,gridx,gridy);
                }
            }
        }
    }

    //写数字
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(issus[i][j]!=0)
            {
                number=issus[i][j]+48;
                p.setFont(QFont("systom", 12, 12));
                p.drawText(QPoint((j+1)*gridx+5*gridx/12,(i+1)*gridy+3*gridy/4),number);
            }
        }
    }

    for(int i=1;i<=9;i++)
    {
        number=i+48;
        p.setFont(QFont("systom", 12, 12));
        p.drawText(QPoint(11*gridx+5*gridx/12,i*gridy+3*gridy/4),number);
    }


    pen.setColor(Qt::red);
    p.setPen(pen);
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(checkn[i][j]==1)
            {
                number=issus[i][j]+48;
                p.setFont(QFont("systom", 12, 12));
                p.drawText(QPoint((j+1)*gridx+5*gridx/12,(i+1)*gridy+3*gridy/4),number);
            }
        }
    }
    QString str;
    str.sprintf("%d",sec);
    time.setText(str);
}


void grid::checknum(int logo,int pi,int pj)
{
    int oo=0,pp=0,qq=0;
    for(int j=0;j<9;j++)
    {
        if(j==pj) continue;
        if(issus[pi][j]==logo)
        {
            oo+=1;
            checkn[pi][j]=1;
        }
    }
    if(oo!=0)
    {
        checkn[pi][pj]=1;
    }
    for(int i=0;i<9;i++)
    {
        if(i==pi) continue;
        if(issus[i][pj]==logo)
        {
            pp+=1;
            checkn[i][pj]=1;
        }
    }
    if(pp!=0)
    {
        checkn[pi][pj]=1;
    }
    int n=pj/3,m=pi/3;
    qDebug()<<n<<m;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if(3*m+i==pi&&3*n+j==pj) continue;
            if(issus[3*m+i][3*n+j]==logo)
            {
                qq++;
                checkn[3*m+i][3*n+j]=1;
            }
        }
    }
    if(qq!=0)
    {
        checkn[pi][pj]=1;
    }
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
            cout<<checkn[i][j]<<" ";
        cout<<endl;
    }
}


void grid::decheck(int logo, int pi, int pj)
{
    for(int i=0;i<9;i++)
    {
        if(issus[pi][i]==logo)
        {
            checkn[pi][i]=0;
        }
        if(issus[i][pj]==logo)
        {
            checkn[i][pj]=0;
        }
    }
    int n=pj/3,m=pi/3;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if(issus[3*m+i][3*n+j]==logo)
            {
                checkn[3*m+i][3*n+j]=0;
            }
        }
    }
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
            cout<<checkn[i][j]<<" ";
        cout<<endl;
    }
}


void grid::mousePressEvent(QMouseEvent *ev)
{
    //获取鼠标位置数字
    int ex=ev->x();
    int ey=ev->y();
    int eex=ex/gridx;
    int eey=ey/gridy;

    //选中区域外不执行
    if(eex<1||eey<1)
        return;
    if(eex>11||eey>9||eex==10)
        return;

    positionj=eex-1;
    positioni=eey-1;

    if(ev->button()==Qt::LeftButton)
    {
        //选中数独区域
        if(eex!=11)
        {
            //所选区域有数
            if(blank[positioni][positionj]==1)
            {
                open=0;
                logol=0;
                searchnum=issus[positioni][positionj];

                update();
                return;
            }
            if(logol!=0)
            {
                if(logol!=issus[positioni][positionj])
                ttnum++;
                issus[positioni][positionj]=logol;
                checknum(logol,positioni,positionj);
            }
            if(issus[positioni][positionj]==0)
            {
                logol=0;
                lastnum=logol;
                lasti=positioni;
                lastj=positionj;
                open=1;
            }
            else
            {
                searchnum=issus[positioni][positionj];
            }

        }
        else
        {
            logol=eey;
            searchnum=eey;
            if(lastnum==0&&open==1)
            {
                issus[lasti][lastj]=logol;
                checknum(logol,lasti,lastj);
                ttnum++;
                open=0;
                logol=0;
                searchnum=0;
            }
        }
    }
    if(ev->button()==Qt::RightButton)
    {
        if(searchnum!=0)
        {
            searchnum=0;
        }
        else
        {
            if(blank[positioni][positionj]==0&&issus[positioni][positionj]!=0)
            {
                logol=issus[positioni][positionj];
                decheck(logol,positioni,positionj);
                issus[positioni][positionj]=0;
                ttnum--;
                logol=0;
                lastnum=logol;
                lasti=positioni;
                lastj=positionj;
                open=0;
            }
        }
    }
    qDebug()<<"tt"<<ttnum;
    update();
    if(ttnum==81)
    {
        checkfinish();
    }

}


int grid::check()
{
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(issus[i][j]<1||issus[i][j]>9)
            {
                return 2;
            }
        }
    }
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            for(int k=0;k<j;k++)
            {
                if(issus[i][j]==issus[i][k])
                {
                        return 0;
                }
            }
        }
    }
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            for(int k=0;k<j;k++)
            {
                if(issus[j][i]==issus[k][i])
                {
                    return 0;
                }
            }
        }
    }

    int a[9];
    int an=0;
    int nnn=0;
    memset(a,0,9);
    for(int i=0;i<3;i++)        //定行
    {
        for(int j=0;j<3;j++)    //定列
        {
            memset(a,0,9);
            for(int n=0;n<3;n++)        //
            {
                for(int m=0;m<3;m++)
                {
                    a[an]=issus[i*3+n][j*3+m];
                    an+=1;
                }
            }
            for(int n=0;n<3;n++)        //
            {
                for(int m=0;m<3;m++)
                {
                    for(int k=3*n+m;k<9;k++)
                    {
                        if(a[k]==issus[i*3+n][j*3+m])
                        {
                            nnn++;
                        }
                        if(nnn>1)
                        {
                            return 0;
                        }
                    }
                    nnn=0;
                }
            }
            an=0;
        }
    }

    return 1;
}


void grid::checkfinish()
{
    int i;
    i=check();
    if(i==1)
    {
        QString str;
        str.sprintf("游戏成功，您花费了%d秒,战胜了全国99.99%的人",sec);
        QMessageBox::about(this,"花费时间",str);

        w2.show();
        w2.move(750,450);
        w2.resize(250,100);
    }
    if(i==0)
    {
        w3.show();
        w3.move(800,500);
        w3.resize(200,100);
    }
}


void grid::timerEvent(QTimerEvent *event)
{
    sec++;
    update();
}


void grid::hintnum()
{
    if(count==0||ttnum==81)
    {
        hint.setText("none");
        return;
    }
    ttnum++;
    QTime time= QTime::currentTime();
    qsrand(time.msec()+time.second()*1000);
    int i=0,j=0,k=0;
    for(;k==0;)
    {
        i=qrand()%9;
        j=qrand()%9;
        if(issus[i][j]==0)
        {
            issus[i][j]=array[i][j];
            blank[i][j]=1;
            k=1;
            count-=1;
        }
    }

    update();
}


void grid::restartshudu()
{
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(blank[i][j]==1)
            {
                issus[i][j]=array[i][j];
            }
            else
            {
                issus[i][j]=0;
            }
        }
    }

    update();
}


void grid::anothershudu()
{
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            array[i][j]=0;
            issus[i][j]=0;
            blank[i][j]=0;
        }
    }
    createshudu1();
    sec=0;
    update();
}


grid::grid(QWidget *parent) : QWidget(parent)
{

    time.setParent(this);
    time.resize(50,50);
    time.move(0,0);
    this->startTimer(1000);

    connect(&w2, &esc::closeall, this, &grid::close);
    connect(&w2, &esc::Again, this, &grid::anothershudu);
    QMenuBar *mBar = new QMenuBar(this);
    QMenu *pFile1= mBar->addMenu("菜单");
    QAction *pnew1=pFile1->addAction("重新开始");
    connect(pnew1, &QAction::triggered,
            [=]
           {
               restartshudu();
           }
            );

    QAction *pnew2=pFile1->addAction("退出");
    connect(pnew2, &QAction::triggered,
            [=]
           {
                 this->close();
           }
            );
    QMenu *pFile2= mBar->addMenu("难度");
    QAction *pnew3=pFile2->addAction("level 1");
    connect(pnew3, &QAction::triggered,
            [=]
           {
                 level=0;
                 count=20;
                 anothershudu();
           }
            );
    QAction *pnew4=pFile2->addAction("level 2");
    connect(pnew4, &QAction::triggered,
            [=]
           {
                 level=1;
                 count=35;
                 anothershudu();
           }
            );
    QAction *pnew5=pFile2->addAction("level 3");
    connect(pnew5, &QAction::triggered,
            [=]
           {
                 level=2;
                 count=40;
                 anothershudu();
           }
            );

    hint.setParent(this);
    hint.setText("提示");
    hint.resize(50,30);
    hint.move(600,20);
    connect(&hint,&QPushButton::clicked,this,&grid::hintnum);
    createshudu1();
}



2.h
#ifndef GRID_H
#define GRID_H
#include <QWidget>
#include <vector>
#include <QPushButton>
#include "esc.h"
#include "wronganswer.h"
using namespace std;

using shudu=vector<vector<int>>;


class grid : public QWidget
{
    Q_OBJECT
public:
    explicit grid(QWidget *parent = nullptr);
    void receiveshudu(shudu);
    void createshudu1();
    void change_num(int,int);
    void change_row(int,int);
    void change_column(int,int);
    void change_threerow(int,int);
    void change_threecolumn(int,int);
    void makeblank(int level);
    void sendshudu();
    int check();
    void checkfinish();
    void restartshudu();
    void anothershudu();
    void hintnum();
    void checknum(int logo,int pi,int pj);
    void decheck(int logo,int pi,int pj);

signals:
public slots:

private:
    int count=5;
    shudu array;
    int blank[9][9]={{0,0,0,0,0,0,0,0,0}};
    shudu issus={{0,0,0,0,0,0,0,0,0},
                 {0,0,0,0,0,0,0,0,0},
                 {0,0,0,0,0,0,0,0,0},
                 {0,0,0,0,0,0,0,0,0},
                 {0,0,0,0,0,0,0,0,0},
                 {0,0,0,0,0,0,0,0,0},
                 {0,0,0,0,0,0,0,0,0},
                 {0,0,0,0,0,0,0,0,0},
                 {0,0,0,0,0,0,0,0,0}};
    esc w2;
    wronganswer w3;
    QPushButton hint;
    QPushButton restart;
    QPushButton another;
    QLineEdit time;

protected:
    void paintEvent(QPaintEvent *);
    void mousePressEvent(QMouseEvent *ev);
    void timerEvent(QTimerEvent *event);
};

#endif // GRID_H
